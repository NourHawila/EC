for(i in 1:(length(Delta)-1)){
if((zvals[i+1]-zvals[i])>0) right[counter] = Delta[i]
if((zvals[i+1]-zvals[i])<0) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
counter=1
for(i in 1:(length(Delta)-1)){
if((zvals[i+1]-zvals[i])>0) right[counter] = Delta[i]
if((zvals[i+1]-zvals[i])<0) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
left
right
for(i in 1:(length(Delta)-1)){
if((zvals[i+1]-zvals[i])>=0) right[counter] = Delta[i]
if((i>1) & ((zvals[i+1]-zvals[i])<0) & (zvals[i]-zvals[i-1])>=0)) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
for(i in 1:(length(Delta)-1)){
if((zvals[i+1]-zvals[i])>=0) right[counter] = Delta[i]
if((i>1) & ((zvals[i+1]-zvals[i])<0) & (zvals[i]-zvals[i-1])>=0)) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
for(i in 1:(length(Delta)-1)){
if((zvals[i+1]-zvals[i])>=0) right[counter] = Delta[i]
if((i>1) & ((zvals[i+1]-zvals[i])<0) & (zvals[i]-zvals[i-1])>=0) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
for(i in 1:(length(Delta)-1)){
if((zvals[i+1]-zvals[i])>=0) right[counter] = Delta[i]
if((i>1) & ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i]
if((i>1) & ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
i
if((i>1) & ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)) {
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
zvals[i+1]
zvals[i]
((zvals[i+1]-zvals[i])<0)
((zvals[i]-zvals[i-1])>=0))
((zvals[i]-zvals[i-1])>=0)
zvals[i]
zvals[i-1]
(i>1) & ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0))
(i>1) & ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)
zvals[i-1]
(i>1)
(i>1) & ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i]
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
left
right
counter
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i]
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
left
right
out
paste("(",left[i],", ",right[i],")")
i=1
paste("(",left[i],", ",right[i],")")
if(left[i]!=right[i]) out = paste("(",left[i],", ",right[i],")",sep="")
out
left
right
out==""
out!=""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
if(out!="") out = paste(out,"(",left[i],", ",right[i],")",sep="")
}
}
out
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
}
}
out
out
i
i=1
if(left[i]!=right[i]){
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
}
out
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
}
}
out
out = ""
i=1
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
out
left[1]
left
right
left[2]==right[2]
out
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
out
deltas
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i]
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
}
monotonicity_check(Delta,zvals)
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i]
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
out
}
monotonicity_check(Delta,zvals)
monotonicity_check(c(1:5),c(0.1,0.2,0.1,0.2,0.3))
plot(c(1:5),c(0.1,0.2,0.1,0.2,0.3))
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i]
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
list(out=out,left=left,right=right)
}
monotonicity_check(c(1:5),c(0.1,0.2,0.1,0.2,0.3))
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i+1]
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
list(out=out,left=left,right=right)
}
monotonicity_check(c(1:5),c(0.1,0.2,0.1,0.2,0.3))
monotonicity_check(c(1:8),c(0.1,-0.2,0.1,0.4,0.7,-0.3,0.2,0.2))
plot(c(1:8),c(0.1,-0.2,0.1,0.4,0.7,-0.3,0.2,0.2))
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i+1]
if(i==1){
if( (zvals[i+1]-zvals[i])<0 ) left[counter] = Delta[i+1]
}
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
list(out=out,left=left,right=right)
}
monotonicity_check(c(1:8),c(0.1,-0.2,0.1,0.4,0.7,-0.3,0.2,0.2))
monotonicity_check(c(1:8),c(0.1,-0.2,0.1,-0.4,0.7,-0.3,0.2,0.2))
plot(c(1:8),c(0.1,-0.2,0.1,-0.4,0.7,-0.3,0.2,0.2))
out
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i+1]
if(i==1){
if( (zvals[i+1]-zvals[i])<0 ) left[counter] = Delta[i+1]
}
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
out
}
monotonicity_check(c(1:8),c(0.1,-0.2,0.1,-0.4,0.7,-0.3,0.2,0.2))
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i+1]
if(i==1){
if( (zvals[i+1]-zvals[i])<0 ) left[counter] = Delta[i+1]
}
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
paste0("The statistic Z_EC is monotonically increasing in the range", out, "with a grid size of 0.01.")
}
monotonicity_check(c(1:8),c(0.1,-0.2,0.1,-0.4,0.7,-0.3,0.2,0.2))
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i+1]
if(i==1){
if( (zvals[i+1]-zvals[i])<0 ) left[counter] = Delta[i+1]
}
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
paste0("The statistic Z_EC is monotonically increasing in the range ", out, " with a grid size of 0.01.")
}
monotonicity_check(c(1:8),c(0.1,-0.2,0.1,-0.4,0.7,-0.3,0.2,0.2))
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i+1]
if(i==1){
if( (zvals[i+1]-zvals[i])<0 ) left[counter] = Delta[i+1]
}
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",left[i],", ",right[i],")",sep=""),sep=" and ")
if(out=="") out = paste("(",left[i],", ",right[i],")",sep="")
}
}
paste0("The statistic Z_EC is monotonically increasing in the range(s) ", out, " with a grid size of 0.01.")
}
monotonicity_check(c(1:8),c(0.1,-0.2,0.1,-0.4,0.7,-0.3,0.2,0.2))
Delta=seq(-0.99,0.99,0.01)
stat_EC2 = Vectorize(stat_EC,"Delta")
zvals=unlist(stat_EC2(x.T,x.C,N.T,N.C,Delta,delta0)["Z",])
monot = sum(diff(zvals)<0)
monot
if(monot>0) outp = monotonicity_check(zvals,Delta)
outp
monotonicity_check = function(Delta,zvals){
left = NA
right = NA
left[1] = Delta[1]
right[1] = Delta[1]
counter=1
for(i in 1:(length(Delta)-1)){
if( (zvals[i+1]-zvals[i])>=0 ) right[counter] = Delta[i+1]
if(i==1){
if( (zvals[i+1]-zvals[i])<0 ) left[counter] = Delta[i+1]
}
if((i>1)){
if( ((zvals[i+1]-zvals[i])<0) & ((zvals[i]-zvals[i-1])>=0)){
counter=counter+1
left[counter] = Delta[i+1]
right[counter] = Delta[i+1]
}
}
}
out = ""
for(i in 1:length(left)){
if(left[i]!=right[i]){
if(out!="") out = paste(out,paste("(",round(left[i],2),", ",round(right[i],2),")",sep=""),sep=" and ")
if(out=="") out = paste("(",round(left[i],2),", ",round(right[i],2),")",sep="")
}
}
paste0("The statistic Z_EC is monotonically increasing in the range(s) ", out, " with a grid size of 0.01.")
}
if(monot>0) outp = monotonicity_check(Delta,zvals)
outp
devtools::document()
devtools::load_all()
devtools::build()
library(EC)
?EC
devtools::document()
devtools::load_all()
devtools::build()
library(devtools)
install_github("NourHawila/EC",force=TRUE)
library(EC)
x.T=5
N.T=8
x.C=10
N.C=19
delta0=0.1
ci_EC
ci_EC(x.T, x.C, N.T, N.C, delta0)
x.T=5
N.T=6
x.C=2
N.C=6
delta0=0.12
ci_EC(x.T, x.C, N.T, N.C, delta0)
x.T=7
N.T=18
x.C=5
N.C=25
delta0=0.1
ci_EC(x.T, x.C, N.T, N.C, delta0)
x.T=83
N.T=88
x.C=69
N.C=76
delta0=0.1
ci_EC(x.T, x.C, N.T, N.C, delta0)
devtools::document()
devtools::load_all()
devtools::build()
#running manuscript examples
library(devtools)
install_github("NourHawila/EC",force=TRUE)
x.T=8
N.T=15
x.C=3
N.C=15
delta0=0
ci_EC(x.T, x.C, N.T, N.C, delta0)
x.T=173
N.T=181
x.C=174
N.C=181
delta0=0.05
ci_EC(x.T, x.C, N.T, N.C, delta0)
