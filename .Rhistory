#devtools::install_github("NourHawila/NonInferiority/myfirstpackage")
devtools::check()
devtools::build()
devtools::run_examples()
devtools::build()
devtools::document()
devtools::load_all()
use_mit_license("Nour Hawila")
devtools::build()
devtools::document()
devtools::load_all()
devtools::build()
devtools::document()
devtools::load_all()
#devtools::install_github("NourHawila/NonInferiority/myfirstpackage")
devtools::check()
devtools::build()
devtools::document()
devtools::load_all()
devtools::build()
getwd()
devtools::document()
devtools::load_all()
#use_mit_license("Nour Hawila")
#devtools::install_github("NourHawila/NonInferiority/myfirstpackage")
devtools::run_examples()
devtools::check()
devtools::document()
devtools::load_all()
#use_mit_license("Nour Hawila")
#devtools::install_github("NourHawila/NonInferiority/myfirstpackage")
devtools::run_examples()
devtools::check()
roxydevtools::build()
devtools::build()
devtools::document()
devtools::load_all()
#use_mit_license("Nour Hawila")
#devtools::install_github("NourHawila/NonInferiority/myfirstpackage")
devtools::run_examples()
devtools::check()
warnings()
devtools::document()
devtools::load_all()
#use_mit_license("Nour Hawila")
#devtools::install_github("NourHawila/NonInferiority/myfirstpackage")
devtools::run_examples()
devtools::check()
#install.packages("roxygen2")
devtools::document()
devtools::load_all()
#use_mit_license("Nour Hawila")
devtools::run_examples()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
#install.packages("roxygen2")
devtools::document()
devtools::load_all()
devtools::check()
devtools::build()
devtools::check()
#install.packages("roxygen2")
devtools::document()
devtools::load_all()
devtools::check()
#install.packages("roxygen2")
devtools::document()
devtools::load_all()
#use_mit_license("Nour Hawila")
devtools::run_examples()
devtools::check()
devtools::build()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Noninferiority/Code/hpc/out/pc6")
library(reshape2)
library(ggplot2)
library(tidyverse)
mat.count=array(NA,dim=c(24^2,3))
colnames(mat.count)=c("count","NT","NC")
counter=1
for(n1 in 2:25){
for(n2 in 2:25){
mat.count[counter,]=c(counter,n1,n2)
counter=counter+1
}}
myks=mat.count[,1][mat.count[,2]>=10 & mat.count[,3]>=10][1:3]
n=length(myks)
knums=myks
###############################
counter=1
myplots=list()
for(myk in knums){
N.T=mat.count[myk,"NT"]
N.C=mat.count[myk,"NC"]
fn0=paste0("files5/pc6_","NT",N.T,"_NC",N.C,".RData")
load(fn0)
fn=paste0("graphs4/graphs",".pdf")
alphas=seq(0.05,.05,by=.05)
ind.delta0s=c(1,11,21,26,51,101,151,201)
delta0s=seq(0,1,by=.001)[ind.delta0s]
methods=c("CZ","EC")
PTs=seq(.1,.9,by=.1)
res=array(as.numeric(NA),dim=c(20,2,length(PTs),length(alphas),length(delta0s)))
for(myPT in 1:length(PTs)){
P.T=PTs[myPT]
deltas.true=seq(P.T-1,P.T,length=20)
for(myalpha in 1:length(alphas)){
mat=bigmat[,myalpha,ind.delta0s]
for(myd in 1:length(deltas.true)){
delta=deltas.true[myd] #(P.T-1,P.T)
P.C=P.T-delta
probs=dbinom(mytab[,"x.T"], mytab[,"N.T"], P.T) * dbinom(mytab[,"x.C"], mytab[,"N.C"], P.C)
res[myd,1,myPT,myalpha,]=sapply(1:length(delta0s), function(i) crossprod(mat[,i]=="RR", probs))
res[myd,2,myPT,myalpha,]=sapply(1:length(delta0s), function(i) crossprod((mat[,i]=="RR" | mat[,i]=="AR"), probs))
} #end of myd loop
print(myalpha)
flush.console()
} #end of myalpha loop
print(paste("****** myPT=",myPT,sep=""))
flush.console()
} #end of myPT loop
delta.long1=rep(as.numeric(NA),2*length(deltas.true)*length(PTs))
counter=1
for(myPT in 1:length(PTs)){
P.T=PTs[myPT]
x=rep(seq(P.T-1,P.T,length=20),2)
delta.long1[counter:(counter+39)]=x
counter=counter+40
} #end of myPT loop
delta.long=rep(delta.long1,length(alphas)*length(delta0s))
res.long=melt(res,varnames=c("delta","method","P.T","alpha","delta0"))
res.long$delta=delta.long
res.long$method=methods[res.long$method]
res.long$P.T=PTs[res.long$P.T]
res.long$alpha=alphas[res.long$alpha]
res.long$delta0=delta0s[res.long$delta0]
print("********************\n")
print("myk=")
print(myk)
print("********************\n")
flush.console()
#for(myPT in 1:length(PTs)){
#	df=as_tibble(res.long) %>% dplyr::filter(P.T==PTs[myPT])
df=as_tibble(res.long)
gr=ggplot(df,aes(x=delta,y=value,color=method,group=method)) +
geom_point(alpha=.3) +
geom_line()+
geom_vline(mapping=aes(xintercept=-delta0),color="blue") +
geom_hline(mapping=aes(yintercept=alpha),color="blue",size=.5,linetype="dashed") +
facet_grid(P.T~delta0) +
xlim(-.9,.9) +
theme_minimal() +
ggtitle(paste("N.T=",N.T,", N.C=",N.C,sep=""))
myplots[[counter]]=gr
counter=counter+1
#} # end of myPT loop
print("*******************")
print(paste("N.T=",N.T,", N.C=",N.C,sep=""))
flush.console()
} #end of myk loop
pdf(fn,width=8.5,height=11)
invisible(lapply(myplots, print))
myplots
str(myplots)
length(myplots)
myplots[[1]]
gr
